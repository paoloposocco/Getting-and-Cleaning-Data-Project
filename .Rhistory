require("plyr"
)
library(plyr)
source('F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R')
###############################################################
if (!require(plyr)) {
install.packages("plyr")
}
library(plyr)
###############################################################
# 1 - Merge the training and test sets to create one data set #
###############################################################
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
x_data <- rbind(x_train, x_test)
y_data <- rbind(y_train, y_test)
subject_data <- rbind(subject_train, subject_test)
features <- read.table("features.txt")
features <- read.table("./UCI HAR Dataset/features.txt")
View(features)
# load features
features <- read.table("./UCI HAR Dataset/features.txt")
# load
activityLabels <- read.table("./UCI HAR Dataset/activity_labels.txt")
# qui activityLabels, oscar activities
###############################################################
# 1 - Merge the training and test sets to create one data set #
###############################################################
# append test data to train data
x_data <- rbind(x_train, x_test)
y_data <- rbind(y_train, y_test)
subject_data <- rbind(subject_train, subject_test)
###############################################################
# 2 - Extracts only the measurements on the mean and          #
# standard deviation for each measurement.                    #
###############################################################
# take just the columns with mean() or std() in the names
meanStdColumns <- grep("mean\\(\\)|std\\(\\)", features[, 2])
# qui meandStdColumns in oscar mean_and_std_features
x_data_meanStd <- x_data[, meanStdColumns]
#qui x_data_meanStd in oscar x_data
# use the correct column names
names(x_data_meanStd) <- features[meanStdColumns, 2]
###############################################################
# 3 - Uses descriptive activity names to name the activities  #
# in the data set                                             #
###############################################################
# update values with correct activity names
y_data[, 1] <- activityLabels[y_data[, 1], 2]
View(y_data)
y_data <- rbind(y_train, y_test)
View(y_data)
y_data[, 1] <- activityLabels[y_data[, 1], 2]
View(y_data)
names(subject_data) <- "subject"
View(subject_data)
# bind all the data in a single data set
all_data <- cbind(x_data, y_data, subject_data)
View(all_data)
names(y_data) <- "activity"
source('F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R')
View(final_data)
View(final_data)
View(features)
View(x_data_meanStd)
source('F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R')
View(final_data)
source('F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R')
source('F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R')
