{
    "contents" : "###############################################################\n# 0 - install plyr and load data                              #\n###############################################################\n\nif (!require(plyr)) {\n        install.packages(\"plyr\")\n}\n\nlibrary(plyr)\n\n# load train data\nx_train <- read.table(\"./UCI HAR Dataset/train/X_train.txt\")\ny_train <- read.table(\"./UCI HAR Dataset/train/y_train.txt\")\nsubject_train <- read.table(\"./UCI HAR Dataset/train/subject_train.txt\")\n\n# load test data\nx_test <- read.table(\"./UCI HAR Dataset/test/X_test.txt\")\ny_test <- read.table(\"./UCI HAR Dataset/test/y_test.txt\")\nsubject_test <- read.table(\"./UCI HAR Dataset/test/subject_test.txt\")\n\n# load features\nfeatures <- read.table(\"./UCI HAR Dataset/features.txt\")\n\n# load \nactivityLabels <- read.table(\"./UCI HAR Dataset/activity_labels.txt\")\n\n\n###############################################################\n# 1 - Merge the training and test sets to create one data set #\n###############################################################\n\n# append test data to train data\nx_data <- rbind(x_train, x_test)\ny_data <- rbind(y_train, y_test)\nsubject_data <- rbind(subject_train, subject_test)\n\n###############################################################\n# 2 - Extracts only the measurements on the mean and          #\n# standard deviation for each measurement.                    #\n###############################################################\n\n# take just the columns with mean() or std() in the names\nmeanStdColumns <- grep(\"mean\\\\(\\\\)|std\\\\(\\\\)\", features[, 2])\n\n\nx_data_meanStd <- x_data[, meanStdColumns]\n\n\n# use the correct column names\nnames(x_data_meanStd) <- features[meanStdColumns, 2]\n\n###############################################################\n# 3 - Uses descriptive activity names to name the activities  #\n# in the data set                                             #\n###############################################################\n\n# assign activity names to the relative numbers\ny_data[, 1] <- activityLabels[y_data[, 1], 2]\n\n# change column name\nnames(y_data) <- \"activity\"\n\n###############################################################\n# 4- Appropriately labels the data set with descriptive       #\n# variable names.                                             #\n###############################################################\n\n# correct column name\nnames(subject_data) <- \"subject\"\n\n# merge all the data\nmergedData <- cbind(x_data_meanStd, y_data, subject_data)\n\n###############################################################\n# 5- From the data set in step 4, creates a second,           #\n# independent tidy data set with the average of each variable #\n# for each activity and each subject.                         #\n###############################################################\n\n\nfinal_data <- ddply(mergedData, .(subject, activity), function(x) colMeans(x[, 1:66]))\n\n# export final data using row.name=FALSE as required\nwrite.table(final_data, \"final_data.txt\", row.name=FALSE)",
    "created" : 1426949005852.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "717919840",
    "id" : "CB459FCE",
    "lastKnownWriteTime" : 1426959881,
    "path" : "F:/Dropbox/UNI/Tesi/R/Coursera/Getting and cleaning data/Getting and cleaning data project/Getting-and-Cleaning-Data-Project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}